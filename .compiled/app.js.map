{"version":3,"sources":["../server/app.js"],"names":["app","PORT","API_VERSION","console","log","TextToIPA","loadDict","get","req","res","send","responce_json","params","word","ipa_translation","lookup","error","ipa_words","text","error_responce","isSentence","words","sentence","sentenceArray","split","map","cleanup","value","trim","sentence_ipa","reduce","accumulator","currentValue","JSON","stringify","listen"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express'\r\n//https://www.npmjs.com/package/text-to-ipa\r\nimport TextToIPA from 'text-to-ipa'\r\nimport { cleanup } from './lib/helpers'\r\n\r\nconst app = express()\r\nconst PORT = 3000\r\nconst API_VERSION = \"v1\"\r\nconsole.log(\"Server Started: \" + PORT)\r\n\r\nTextToIPA.loadDict();\r\n\r\napp.get(\"/\",(req,res)=>{\r\n    res.send(\"Please visit /v1/word/<enter word here> or /v1/words/<enter sentences here>\")\r\n})\r\n\r\n//main endpoint for server\r\napp.get('/v1/word/:word', function (req, res) {\r\n    let responce_json = {\r\n        \"sentence_ipa\":\"\",\r\n        \"ipa_words\":[],\r\n        \"sentence\":\"\",\r\n        \"error\":\"\"   ,\r\n        \"version\": API_VERSION\r\n    }\r\n    if(req.params.word){\r\n        let word = req.params.word\r\n        let ipa_translation = TextToIPA.lookup(word)\r\n\r\n        console.log(ipa_translation)\r\n        responce_json.word = word\r\n        responce_json.error = ipa_translation.error == \"undefined\" ? \"Word Not found\":\"None\"\r\n        responce_json.ipa_words = ipa_translation.text\r\n        res.send(responce_json)\r\n\r\n    }else{\r\n        console.log(\"ERROR: word not found\")\r\n        let error_responce = req.params\r\n        error_responce[\"error\"] =\"ERROR: word not  found\"\r\n        res.send(error_responce)     \r\n    }\r\n    \r\n\r\n})\r\n\r\n\r\n// words enpoint\r\napp.get(\"/v1/words/:words\",(req,res)=>{\r\n    let isSentence = req.params.words\r\n    let responce_json = {\r\n        \"sentence_ipa\":\"\",\r\n        \"ipa_words\":[],\r\n        \"sentence\":\"\",\r\n        \"error\":\"\"   ,\r\n        \"version\": API_VERSION\r\n    }\r\n\r\n    if(isSentence) {\r\n        let sentence = req.params.words\r\n        let sentenceArray = []\r\n        sentenceArray = sentence.split(/\\s+/)//split on space ex: .split(\" \")\r\n        // sentenceArray = sentenceArray.map((value)=> {\r\n        //     return  cleanup(value)\r\n        // })\r\n\r\n        sentenceArray = sentenceArray.map(cleanup)\r\n        console.log(sentenceArray)\r\n        responce_json.ipa_words = sentenceArray.map((value)=>{\r\n          return TextToIPA.lookup(value).text\r\n        })\r\n        \r\n        //Starting with {\"error\":\"\",\"sentence\":\"\",\"ipa_words\":[\"ðʌ OR ðʌˈ OR ði\",\"bæˈtɚi\",\"hɔˈɹs\",\"stejˈpʌl\"]}\r\n        //Ending with   {\"error\":\"\",\"sentence\":\"\",\"ipa_words\":[\"ðʌ\"             ,\"bæˈtɚi\",\"hɔˈɹs\",\"stejˈpʌl\"]}\r\n        // split the multple ipa forms and take only the first one\r\n        // \"ðʌ OR ðʌˈ OR ði\" => becomes  [\"ðʌ\", \"ðʌˈ\", \"ði\"] and retulting in \"ðʌ\"\r\n        responce_json.ipa_words = responce_json.ipa_words.map((word)=>{\r\n            return word.split(\"OR\").map((value)=>{ return value.trim()})[0]\r\n        })\r\n\r\n        //ipa sentense version with spaces between words\r\n        responce_json.sentence_ipa = responce_json.ipa_words.reduce((accumulator, currentValue)=> { \r\n            return accumulator +\" \"+ currentValue\r\n        });\r\n\r\n        res.send(JSON.stringify(responce_json))\r\n    }else{\r\n        responce_json.error = \"sentence not found\"\r\n        res.send(JSON.stringify(responce_json))\r\n    }\r\n})\r\n\r\napp.listen(PORT, () => console.log(`Example app listening on port ${PORT}!`))\r\n"]}